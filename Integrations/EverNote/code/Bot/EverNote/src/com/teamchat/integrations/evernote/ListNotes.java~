package com.teamchat.integrations.evernote;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import com.evernote.clients.NoteStoreClient;
import com.evernote.edam.error.EDAMNotFoundException;
import com.evernote.edam.error.EDAMSystemException;
import com.evernote.edam.error.EDAMUserException;
import com.evernote.edam.notestore.NoteFilter;
import com.evernote.edam.notestore.NoteList;
import com.evernote.edam.type.Note;
import com.evernote.edam.type.NoteSortOrder;
import com.evernote.edam.type.Notebook;
import com.evernote.thrift.TException;
import com.teamchat.client.sdk.TeamchatAPI;
import com.teamchat.client.sdk.chatlets.TextChatlet;

public class ListNotes {
		
	public ListNotes(TeamchatAPI api,NoteStoreClient noteStore) throws EDAMUserException, EDAMSystemException, EDAMNotFoundException, TException, IOException, ParserConfigurationException, SAXException {
		// TODO Auto-generated constructor stub
		List<Notebook> notebooks = noteStore.listNotebooks();

	    api.perform(api.context().currentRoom().post(new TextChatlet("Listing NoteBooks...")));
	    	    		
	    for (Notebook notebook : notebooks) {
	      api.perform(api.context().currentRoom().post(new TextChatlet(">>Notebook Name: " + notebook.getName())));
	      NoteFilter filter = new NoteFilter();
	      filter.setNotebookGuid(notebook.getGuid());
	      filter.setOrder(NoteSortOrder.CREATED.getValue());
	      filter.setAscending(true);

	      NoteList noteList = noteStore.findNotes(filter, 0, 100);
	      List<Note> notes = noteList.getNotes();
	      for (Note note : notes) {
	    	  Note fullNote = noteStore.getNote(note.getGuid(), true, true, false,false);
		      //fullNote.getContent().substring(119, n-16);
		      File file = new File("/home/intern9/Downloads/temp.xml");
	          // if file doesnt exists, then create it
			  if (!file.exists()) {
					file.createNewFile();
			  }
	          	FileWriter fw = new FileWriter(file.getAbsoluteFile());
				BufferedWriter bw = new BufferedWriter(fw);
				bw.write(fullNote.getContent());
				bw.close();
				DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
	            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
	            Document doc = docBuilder.parse ("/home/intern9/Downloads/temp.xml");

	            // normalize text representation
	            doc.getDocumentElement ().normalize ();
	            
	            NodeList info = doc.getElementsByTagName("div");
	            Node currNode=info.item(0);
	            Element element=(Element)currNode;
	            NodeList child=element.getChildNodes();
	            String data=((Node)child.item(0)).getNodeValue().trim();
	            api.perform(api.context().currentRoom().post(new TextChatlet("**Title of the Note : "+fullNote.getTitle()+"<br>"+data)));
		   }
	      api.perform(api.context().currentRoom().post(new TextChatlet("----Notes present in "+notebook.getName()+" has been shown successfully.----")));
	    }
	    api.perform(api.context().currentRoom().post(new TextChatlet("**********END**********")));
	}

}
